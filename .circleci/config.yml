version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.0
  slack: circleci/slack@4.10.1
  php: circleci/php@1.1.0
  node: circleci/node@5.0.3
  trellis: digital-swing/trellis-tools@0.2.1

parameters:
  env:
    type: string
    default: "develop"
  site-name:
    type: string
    default: "bedrock-develop"
  theme-path:
    type: string
    default: "web/app/themes/ds-custom"
  force-theme-rebuild:
    type: boolean
    default: true
  rebuild-assets:
    type: boolean
    default: false
  public-dir:
    type: string
    default: public
  production-flag:
    type: string
    default: ":production"
  trellis-cache-version:
    type: string
    default: v1
  debug:
    type: boolean
    default: true

images:
  php-ansible: &php-ansible
    image: "digitalswing/php-ansible:8.0.11"
  mariadb: &mariadb
    image: "cimg/mariadb:10.10.1"
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_PASSWORD: wordpress
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: wordpress
    name: mysql

secrets: &secrets
  context:
    - TOKENS
    - slack-secrets

executors:
  base:
    docker:
      - *php-ansible
    working_directory: /tmp
  base_db:
    docker:
      - *php-ansible
      - *mariadb
    working_directory: /tmp

backstop-filters: &backstop-filters
  branches:
    ignore:
      - main
      - develop
      - production
      - php7.4

codeception-filters: &codeception-filters
  branches:
    only:
      - /^rel(?:ease)?.*$/
      - /^(bump|feat|fix)\/.+$/
      - /.*php-.*/
      - /.*npm-[^dev].*/
      - /.*plugins-[^dev].*/
      - /.*themes-.*/
      - /.*wordpress.*/
commands:
  add_key_to_known_hosts:
    description: Adds SSH key to known_hosts (if it matches a fingerprint)
    parameters:
      domain:
        type: string
      key_type:
        type: string
      fingerprint:
        type: string

    steps:
      - run:
          name: Add "<< parameters.key_type >>" key from << parameters.domain >> to known_hosts
          command: |
            # Fetch publicly available key
            SCAN=$(ssh-keyscan -t << parameters.key_type >> << parameters.domain >>)
            echo "*** scanned key: $SCAN"
            # Compute fingerprint
            SCAN_FINGERPRINT=$(echo "$SCAN" | ssh-keygen -lf - )
            echo "*** scanned fingerprint: $SCAN_FINGERPRINT"
            echo "*** known fingerprint: << parameters.fingerprint >>"
            if [[ "$SCAN_FINGERPRINT" =~ "<< parameters.fingerprint >>" ]]; then
              echo "Scanned key matches known fingerprint, adding..."
              mkdir -p ~/.ssh
              echo "$SCAN" >> ~/.ssh/known_hosts
              chmod 0700 ~/.ssh
              chmod 0600 ~/.ssh/known_hosts
            else
              echo "Scanned key does not match known fingerprint, not adding."
              exit 1
            fi
  add_github_key_to_known_hosts:
    description: Adds SSH key to known_hosts (if it matches a fingerprint)
    steps:
      - add_key_to_known_hosts:
          domain: github.com
          key_type: ecdsa
          fingerprint: "SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM"

      - add_key_to_known_hosts:
          domain: github.com
          key_type: rsa
          fingerprint: "SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8"

      - add_key_to_known_hosts:
          domain: github.com
          key_type: ed25519
          fingerprint: "SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU"
  checkout:
    description: Clone bedrock-trellis-ds
    parameters:
      path:
        description: "Where to checkout files"
        type: string
        default: project
    steps:
      - run:
          command: |
            git clone -b main git@github.com:digital-swing/bedrock-trellis-ds.git << parameters.path >>
  require_current_version:
    description: Require current package branch
    steps:
      - run:
          command: |
            if [ "$CIRCLE_BRANCH" == "7.4" ] || [ "$CIRCLE_BRANCH" == "8.0" ]; then
                BRANCH="${CIRCLE_BRANCH}.x-dev"
            else
                BRANCH="dev-${CIRCLE_BRANCH}"
            fi
            composer require --dev digital-swing/wp-dev-tools:${BRANCH} -W
          working_directory: project/public_html
          name: Require current package branch
  get_php_version:
    description: Extract php version from repo
    parameters:
      repo:
        description: "The repo to clone"
        type: string
        default: "bedrock-trellis-ds"
      branch:
        description: "Git branch to clone"
        type: string
        default: "develop"
    steps:
      - run: |
          curl --header "Authorization: token ${GH_BOT_PAT}" \
            --header 'Accept: application/vnd.github.v3.raw' \
            --output /tmp/main.yml \
            --location https://raw.githubusercontent.com/digital-swing/<< parameters.repo >>/<< parameters.branch >>/trellis/group_vars/all/main.yml
          echo "export PHP_VERSION=$(cat /tmp/main.yml | grep php_version | cut -d'"' -f 2)" >> $BASH_ENV

  find_wp_install:
    description: Set up our WP_ENV based on the environment
    parameters:
      environment:
        default: undefined
        description: >
          Are we deploying to the production, staging, development, or custom
          environment?

          Production, staging, and development need a corresponding environment
          variable defined

          in CircleCI's project configuration. An optional
          `./.gitignores/__deployment`

          file can be used to deploy build files rather than source files.
        type: string
    steps:
      - run:
          command: |
            # shellcheck disable=SC2050
            WP_INSTALL="develop"

            echo "export WP_INSTALL=$WP_INSTALL
            export ENV=`echo $WP_INSTALL`" >> "$BASH_ENV"
            source "$BASH_ENV"
          name: Set up the WP install name
  provision-server:
    description: Provision server
    parameters:
      site-env:
        description: "The environment to deploy to, e.g: staging, production, etc"
        type: string
        default: ci
      tags:
        description: "Ansible tasks to run"
        type: string
        default: wordpress,vendor-tokens,dotenv
      skip_tags:
        description: "Ansible tasks to skip"
        type: string
        default: ""
      install_wp:
        description: "Whether to install wp with wp core install"
        type: boolean
        default: false
      trellis-path:
        description: "Working directory"
        type: string
        default: /tmp/project/trellis
    steps:
      - run:
          command: trellis exec ansible-playbook ci-provision.yml --tags=<< parameters.tags >> --skip-tags=<< parameters.skip_tags >> -e '{"env":"<< parameters.site-env>>","install_wp":<< parameters.install_wp>>}' <<# pipeline.parameters.debug >>-vvv<</ pipeline.parameters.debug >>
          working_directory: << parameters.trellis-path >>
          name: Provision server
  pull:
    parameters:
      database:
        description: "Whether to pull database"
        type: boolean
        default: true
      uploads:
        description: "Whether to pull uploads"
        type: boolean
        default: true
      languages:
        description: "Whether to pull languages"
        type: boolean
        default: true
      trellis-path:
        type: string
        default: project/trellis
    steps:
      - run:
          working_directory: << parameters.trellis-path >>
          command: |
            trellis exec ansible-playbook pull.yml \
             -i hosts/ci -i hosts/<< pipeline.parameters.env >> \
             -e site=<< pipeline.parameters.site-name >> \
             -e env=<< pipeline.parameters.env >> \
             --tags=<<# parameters.database >>database<</ parameters.database >>,<<# parameters.uploads >>uploads<</ parameters.uploads >>,<<# parameters.languages >>languages<</ parameters.languages >> \
             <<# pipeline.parameters.debug >>-vvv<</ pipeline.parameters.debug >>
          name: Pull database /uploads
jobs:
  install-php-deps:
    executor: base_db
    steps:
      - add_github_key_to_known_hosts
      - checkout
      - trellis/prepare:
          cache-version: << pipeline.parameters.trellis-cache-version >>
          trellis-path: /tmp/project/trellis
          vault-file: ~/.vault_pass
      - find_wp_install
      - provision-server:
          tags: nginx-includes,wordpress-setup,vendor-tokens,dotenv
          skip_tags: wordpress-setup-database,wordpress-setup-self-signed-certificate,wordpress-setup-nginx-client-cert
      - require_current_version
      - php/install-packages:
          install-flags: --no-interaction --prefer-dist --ignore-platform-reqs
          app-dir: "project/public_html"
      - php/install-packages:
          install-flags: --no-interaction --prefer-dist --ignore-platform-reqs
          app-dir: "project/public_html/<< pipeline.parameters.theme-path >>"
      - persist_to_workspace:
          root: /tmp
          paths:
            - project/public_html/.env
            - project/public_html/auth.json
            - project/public_html/vendor
            - project/public_html/web/wp
            - project/public_html/web/app/plugins
            - project/public_html/web/app/mu-plugins
            - project/public_html/<< pipeline.parameters.theme-path >>/vendor
      - slack/notify:
          event: fail
          template: basic_fail_1
  build-theme:
    parameters:
      circle_token:
        default: CIRCLE_TOKEN
        description: Environment variable that contains a CircleCI API token
        type: env_var_name
    executor: base_db
    steps:
      - checkout
      - trellis/prepare:
          cache-version: << pipeline.parameters.trellis-cache-version >>
          trellis-path: /tmp/project/trellis
          vault-file: ~/.vault_pass
      - find_wp_install
      - attach_workspace:
          at: /tmp
      - provision-server:
          tags: common
      - run:
          command: cp project/.nvmrc .
          name: Copy nvmrc to current folder
      - node/install
      - node/install-packages:
          pkg-manager: yarn
          app-dir: "project/public_html/<< pipeline.parameters.theme-path >>"
          include-branch-in-cache-key: false
      - run:
          command: . project/.circleci/get-cache-version.sh
          environment:
            CIRCLE_TOKEN_VAR: << parameters.circle_token >>
            BRANCH: << pipeline.git.branch >>
      - when:
          condition:
            or:
              - equal: [true, << pipeline.parameters.force-theme-rebuild >>]
              - equal: [production, << pipeline.git.branch >>]
              - equal: [staging, << pipeline.git.branch >>]
          steps:
            - when:
                condition:
                  or:
                    - equal: [staging, << pipeline.parameters.env >>]
                    - equal: [production, << pipeline.parameters.env >>]
                steps:
                  - provision-server:
                      tags: nginx,wordpress,wp-cli
                      skip_tags: wordpress-install-directories
                      install_wp: true
                  - pull:
                      uploads: false
                      languages: false
            - run:
                command: . project/.circleci/build-theme.sh
                environment:
                  CIRCLE_TOKEN_VAR: << parameters.circle_token >>
                  BRANCH: << pipeline.git.branch >>
                  THEME_PATH: << pipeline.parameters.theme-path >>
                  ENV: << pipeline.parameters.env >>
                  PRODUCTION_FLAG: << pipeline.parameters.production-flag >>
                  INCREMENT_CACHE: true
      - unless:
          condition:
            or:
              - equal: [true, << pipeline.parameters.force-theme-rebuild >>]
              - equal: [production, << pipeline.git.branch >>]
              - equal: [staging, << pipeline.git.branch >>]
          steps:
            - restore_cache:
                keys:
                  - assets-{{ .Branch }}-{{ checksum "/tmp/assets_version" }}
            - run:
                name: Fail gracefully if public folder exist
                command: |
                  if [[ -d /tmp/project/public_html/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.public-dir >> ]]; then
                    circleci-agent step halt
                  fi
            - when:
                condition:
                  or:
                    - equal: [staging, << pipeline.parameters.env >>]
                    - equal: [production, << pipeline.parameters.env >>]
                steps:
                  - provision-server:
                      tags: nginx,wordpress,wp-cli
                      skip_tags: wordpress-install-directories
                      install_wp: true
                  - pull:
                      uploads: false
                      languages: false
            - run:
                command: . project/.circleci/build-theme.sh
                environment:
                  CIRCLE_TOKEN_VAR: << parameters.circle_token >>
                  BRANCH: << pipeline.git.branch >>
                  THEME_PATH: << pipeline.parameters.theme-path >>
                  ENV: << pipeline.parameters.env >>
                  PRODUCTION_FLAG: << pipeline.parameters.production-flag >>
                  INCREMENT_CACHE: false
      - save_cache:
          paths:
            - project/public_html/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.public-dir >>
          key: assets-{{ .Branch }}-{{ checksum "/tmp/assets_version" }}
      - persist_to_workspace:
          root: /tmp
          paths:
            - project/public_html/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.public-dir >>
      - store_artifacts:
          path: /tmp/project/public_html/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.public-dir >>/report.html
      - slack/notify:
          event: fail
          template: basic_fail_1

  codeception:
    description: |
      Run codeception tests for end-to-end testing on a WordPress site.
      Codeception supports unit, wpunit, functional, and acceptance testing.
    executor: base_db
    parallelism: 5
    parameters:
      package_name:
        default: << pipeline.parameters.theme-path >>
        description: Name of the plugin or theme (directory name)
        type: string
      package_type:
        default: project
        description: Is this a WordPress plugin or theme
        enum:
          - plugin
          - theme
          - project
        type: enum
    steps:
      - checkout:
          path: project
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
            java -jar /usr/local/bin/selenium.jar --version
          name: Check install
          working_directory: /tmp/project/public_html

      - run:
          name: Start Selenium
          command: java -jar /usr/local/bin/selenium.jar -log tests/_output/selenium.log
          background: true
          working_directory: /tmp/project/public_html

      - when:
          condition:
            equal:
              - project
              - << parameters.package_type >>
          steps:
            - attach_workspace:
                at: /tmp
            - run:
                command: >-
                  echo "export CODECEPT_DIRECTORY=/tmp/project/public_html" >>
                  "$BASH_ENV"
                name: Set up tests directory
                working_directory: /tmp/project/public_html
      - trellis/prepare:
          cache-version: << pipeline.parameters.trellis-cache-version >>
          trellis-path: /tmp/project/trellis
          vault-file: ~/.vault_pass
      - provision-server:
          tags: nginx-includes,wordpress,wp-cli,codeception,mail
          skip_tags: wordpress-install-directories
      - pull:
          uploads: false
          database: false
      - run:
          name: Import database
          command: /usr/bin/wp db import tests/_data/dump.sql
          working_directory: /tmp/project/public_html
      - run: touch "$CODECEPT_DIRECTORY/.env"
      - run:
          name: Run Codeception tests
          command: |
            shopt -s globstar
            circleci tests glob \
              "$CODECEPT_DIRECTORY/tests/acceptance/**/*.php" \
              "$CODECEPT_DIRECTORY/tests/functional/**/*.php" \
              "$CODECEPT_DIRECTORY/tests/unit/**/*.php" \
              "$CODECEPT_DIRECTORY/tests/wpunit/**/*.php" \
              | circleci tests split --split-by=timings \
              > "$CODECEPT_DIRECTORY/tests/_data/ci_group_${CIRCLE_NODE_INDEX}"
            cd "$CODECEPT_DIRECTORY" && ./vendor/bin/codecept run -g "ci_group_${CIRCLE_NODE_INDEX}" \
              --xml="$CODECEPT_DIRECTORY/tests/_output/results.xml" \
              --no-interaction \
              <<# pipeline.parameters.debug >>-vvv<</ pipeline.parameters.debug >>
          working_directory: /tmp/project/public_html
      - store_test_results:
          path: /tmp/project/public_html/tests/_output
      - store_artifacts:
          path: /tmp/project/public_html/tests/_output
      - slack/notify:
          event: fail
          template: basic_fail_1
workflows:
  build_test_deploy:
    jobs:
      - install-php-deps:
          name: install-php-deps-bedrock-trellis-ds-php8.0
          pre-steps:
            - get_php_version
          context:
            - TOKENS
            - slack-secrets
      - build-theme:
          name: build-theme-bedrock-trellis-ds-php8.0
          pre-steps:
            - get_php_version
          context:
            - TOKENS
            - slack-secrets
          requires:
            - install-php-deps-bedrock-trellis-ds-php8.0
      - codeception:
          name: codeception-bedrock-trellis-ds-php8.0
          pre-steps:
            - get_php_version
          context:
            - TOKENS
            - slack-secrets
          requires:
            - install-php-deps-bedrock-trellis-ds-php8.0
            - build-theme-bedrock-trellis-ds-php8.0
          filters:
            branches:
              only:
                - staging
                - master
                - main
                - develop
                - /.*php-.*/
                - /.*codeception.*/