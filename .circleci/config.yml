version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.0
  slack: circleci/slack@4.1
  # lighthouse-check: foo-software/lighthouse-check@0.0.13

parameters:
  site-name:
    type: string
    default: "bedrock-develop" # TODO same identifier as in wordpress_sites.yml
  theme-name:
    type: string
    default: "ds-custom" # TODO theme folder name
  theme-path:
    type: string
    default: "public_html/web/app/themes"
  rebuild-assets:
    type: boolean
    default: false
  src-dir:
    type: string
    default: public # TODO theme build folder
  production_flag:
    type: string
    default: ":production" # TODO  build production flag, usually " --production" or ":production"
  default_environment:
    type: string
    default: "develop" # TODO environments used as reference, usually "production"

executors:
  base:
    docker:
      - image: "digitalswing/php-ansible:8.1"
commands:
  checkout:
    description: Clone bedrock-trellis-ds and require current package branch
    steps:
      - run:
          command: |
            git clone -b "develop" "digital-swing/bedrock-ds" project
            cd project
            composer require digital-swing/wp-dev-tools:dev-$CIRCLE_BRANCH
  prepare_ansible:
    description: Load API keys and passwords into required files
    steps:
      - run:
          command: echo "${ANSIBLE_VAULT_PASSWORD}" > /home/circleci/.vault_pass
          name: Set ansible vault password
      - restore_cache:
          keys:
            - ansible-galaxy-v5-{{ checksum "project/trellis/galaxy.yml" }}
            - ansible-galaxy-
      - run:
          command: ansible --version
          working_directory: project/trellis

      - run:
          command: ansible-galaxy install -r galaxy.yml
          name: Install ansible galaxy roles
          working_directory: project/trellis

      - save_cache:
          key: ansible-galaxy-v5-{{ checksum "project/trellis/galaxy.yml" }}
          paths:
            - /tmp/project/trellis/vendor
            - /home/circleci/.cache
  change-yarn-global-home:
    description: |
      Change the yarn global directory to the users home directory
    parameters:
      location:
        default: /home/circleci/yarn-global
        description: The location to set as the yarn Global home
        type: string
    steps:
      - run:
          command: |
            mkdir -p <<parameters.location>>
            yarn config set prefix '<<parameters.location>>'
            yarn config set global-folder '<<parameters.location>>'
            echo 'export PATH="<<parameters.location>>/bin:$PATH"' >> $BASH_ENV
          name: Change Location
  install_backstop:
    description: Install backstopjs
    parameters:
      location:
        default: /home/circleci/yarn-global
        description: The location to save cache from
        type: string
    steps:
      - restore_cache:
          keys:
            - backstop-v9
      - change-yarn-global-home
      - run:
          command: |
            which backstop > /dev/null || which yarn > /dev/null || (echo "Need yarn(1) to be installed."; exit 1)
            which backstop > /dev/null || yarn global add backstopjs
          name: Install backstopjs
      - save_cache:
          paths:
            - <<parameters.location>>
          key: backstop-v9
  find_wp_install:
    description: Set up our WP_ENV based on the environment
    parameters:
      environment:
        default: undefined
        description: >
          Are we deploying to the production, staging, development, or custom
          environment?

          Production, staging, and development need a corresponding environment
          variable defined

          in CircleCI's project configuration. An optional
          `./.gitignores/__deployment`

          file can be used to deploy build files rather than source files.
        type: string
    steps:
      - run:
          command: |
            # shellcheck disable=SC2050
            if [[ "undefined" == "<< parameters.environment >>" ]]; then
                WP_ENV="$CIRCLE_BRANCH"
            else
                WP_ENV="<< parameters.environment >>"
            fi

            case "$WP_ENV" in
                master)
                    WP_INSTALL="production";;
                production)
                    WP_INSTALL="production";;
                main)
                    WP_INSTALL="production";;
                staging)
                    WP_INSTALL="staging";;
                develop)
                    WP_INSTALL="develop";;
                *)
                    WP_INSTALL="<< pipeline.parameters.default_environment >>";;
            esac

            echo "export WP_INSTALL=$WP_INSTALL
            export ENV=`echo $WP_INSTALL`" >> "$BASH_ENV"
            source "$BASH_ENV"
          name: Set up the WP install name
  install_node_dependencies:
    description: Installs Node dependencies
    parameters:
      no-dev:
        description: Should yarn skip dev requirements?
        type: boolean
        default: false
      cache-name:
        description: Specific cache name for different executors
        type: string
        default: base
      base-dir:
        description: Where to run
        type: string
        default: "project"
    steps:
      - run:
          command: |
            if [ -e << parameters.base-dir >>/yarn.lock ]
              then cp << parameters.base-dir >>/yarn.lock ./<< parameters.cache-name >>-yarn.lock
            fi
          name: Make a local copy of << parameters.base-dir >>/yarn.lock
      - restore_cache:
          keys:
            - yarn-v7-<<# parameters.no-dev >>prod-<</ parameters.no-dev >><< parameters.cache-name >>-dependencies-{{ checksum "<< parameters.cache-name >>-yarn.lock" }}
            - yarn-v7-<< parameters.cache-name >>-dependencies-{{ checksum "<< parameters.cache-name >>-yarn.lock" }}
            - yarn-v7-<<# parameters.no-dev >>prod-<</ parameters.no-dev >><< parameters.cache-name >>-dependencies-
            - yarn-v7-<< parameters.cache-name >>-dependencies-
            - yarn-
      - run:
          name: Install << parameters.base-dir >> Node Dependencies
          command: |
            if [ -f << parameters.base-dir >>/yarn.lock ]; then
                [ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"
                [ -s "$HOME/.nvm/bash_completion" ] && \. "$HOME/.nvm/bash_completion"
                cd << parameters.base-dir >>
                nvm install
                yarn --frozen-lockfile --cache-folder ~/.cache/yarn --emoji false --non-interactive <<# parameters.no-dev >><< pipeline.parameters.production_flag >><</ parameters.no-dev >>
            fi
      - save_cache:
          paths:
            - << parameters.base-dir >>/node_modules
          key: yarn-v7-<<# parameters.no-dev >>prod-<</ parameters.no-dev >><< parameters.cache-name >>-dependencies-{{ checksum "<< parameters.cache-name >>-yarn.lock" }}
  install_php_dependencies:
    description: Installs PHP dependencies
    parameters:
      no-dev:
        description: Should composer skip dev requirements?
        type: boolean
        default: false
      cache-name:
        description: Specific cache name for different executors
        type: string
        default: base
      base-dir:
        description: Where to run
        type: string
        default: "."
    steps:
      # - run:
      #     command: composer validate --no-check-all --no-check-publish
      #     name: Validate composer.lock and fail if not valid
      #     working_directory: << parameters.base-dir >>
      - run:
          command: |
            if [ -e << parameters.base-dir >>/composer.lock ]
              then cp << parameters.base-dir >>/composer.lock ./<< parameters.cache-name >>-composer.lock
            fi
          name: Make a local copy of << parameters.base-dir >>/composer.lock
      - restore_cache:
          keys:
            - composer-v5-<<# parameters.no-dev >>prod<</ parameters.no-dev >>-<< parameters.cache-name >>-dependencies-{{ checksum "<< parameters.cache-name >>-composer.lock" }}
            - composer-v5-<< parameters.cache-name >>-dependencies-{{ checksum "<< parameters.cache-name >>-composer.lock" }}
            - composer-v5-<<# parameters.no-dev >>prod<</ parameters.no-dev >>-<< parameters.cache-name >>-dependencies-
            - composer-v5-<< parameters.cache-name >>-dependencies-
            - composer-
      - run:
          name: Install << parameters.base-dir >> Composer Dependencies
          command: |
            if [ -f << parameters.base-dir >>/composer.lock ]; then
                cd << parameters.base-dir >>
                composer install <<# parameters.no-dev >>--no-dev<</ parameters.no-dev >> --no-interaction --optimize-autoloader --prefer-dist
            fi
      - unless:
          condition:
            equal: [public_html, << parameters.base-dir >>]
          steps:
            - save_cache:
                paths:
                  - << parameters.base-dir >>/vendor
                key: composer-v5-<<# parameters.no-dev >>prod<</ parameters.no-dev >>-<< parameters.cache-name >>-dependencies-{{ checksum "<< parameters.cache-name >>-composer.lock" }}
      - when:
          condition:
            equal: [public_html, << parameters.base-dir >>]
          steps:
            - save_cache:
                paths:
                  - << parameters.base-dir >>/vendor
                  - << parameters.base-dir >>/web/wp
                  - << parameters.base-dir >>/web/app/plugins
                  - << parameters.base-dir >>/web/app/mu-plugins
                key: composer-v5-<<# parameters.no-dev >>prod<</ parameters.no-dev >>-<< parameters.cache-name >>-dependencies-{{ checksum "<< parameters.cache-name >>-composer.lock" }}
  provision_server:
    description: Provision server
    parameters:
      site-env:
        description: "The environment to deploy to, e.g: staging, production, etc"
        type: string
        default: ci
      tags:
        description: "Ansible tasks to run"
        type: string
        default: wordpress,vendor-tokens,dotenv
      skip_tags:
        description: "Ansible tasks to skip"
        type: string
        default: ""
      install_wp:
        description: "Whether to install wp with wp core install"
        type: boolean
        default: false
    steps:
      - run:
          command: ansible-playbook ci-provision.yml --tags=<< parameters.tags >> --skip-tags=<< parameters.skip_tags >> -e '{"env":"<< parameters.site-env>>","install_wp":<< parameters.install_wp>>}' -vvv
          working_directory: /tmp/project/trellis
  set_bin_default_path:
    steps:
      - run:
          name: Making /usr/bin the default folder for binaries
          command: |
            echo "export PATH=/usr/bin:$PATH" >> "$BASH_ENV"
            source "$BASH_ENV"
  pull_uploads:
    steps:
      - run: sudo rm -rf /tmp/project/public_html/web/app/uploads/*
      - run:
          command: |
            BRANCH="<< pipeline.git.branch >>"
            BRANCH=$(echo $BRANCH | sed "s/[-\/\.]/_/g")
            echo "export BRANCH=\"${BRANCH^^}\"" >> "$BASH_ENV"; source "$BASH_ENV"
      - run:
          command: |

            cmd=('curl' 'https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar/${BRANCH}_ASSETS_VERSION -H "Circle-Token: $<< parameters.circle_token >>" | jq "select( .name == \"${BRANCH}_UPLOADS_VERSION\" ) | .value"')

            result=$("${cmd[@]}")

            if [[ -z $result ]] ; then
              curl -X POST \
                --header "Content-Type: application/json" \
                -d '{"name":"'${BRANCH}_UPLOADS_VERSION'", "value":1}' \
                https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar -H "Circle-Token: $<< parameters.circle_token >>"

              echo "export BRANCH_UPLOADS_VERSION=1" >> $BASH_ENV; source "$BASH_ENV"
              echo "1" > /tmp/assets_version
            else
              echo "export BRANCH_UPLOADS_VERSION=$result" >> $BASH_ENV; source "$BASH_ENV"
              echo $result > /tmp/assets_version
            fi
            cat /tmp/assets_version

          name: Get ${BRANCH}_UPLOADS_VERSION, set to 1 if it doesn't exist
      - restore_cache:
          keys:
            - uploads-v1-
            - uploads-
      - run:
          working_directory: /tmp/project/trellis
          command: ansible-playbook uploads.yml -i hosts/${ENV} --extra-vars="site=<< pipeline.parameters.site-name >> mode=pull" -vvv
          name: Pull uploads

      - run:
          command: find /tmp/project/public_html/web/app/uploads -type f -exec md5sum "{}" + > UL_CACHE_KEY || [ -f "UL_CACHE_KEY" ]
          name: Generate checksum for uploads folder event if folder doesn't exist
      - save_cache:
          key: uploads-v1-{{ checksum "UL_CACHE_KEY" }}
          paths:
            - /tmp/project/public_html/web/app/uploads
      - run:
          command: mkdir -p /tmp/project/public_html/web/app/uploads
          name: Create uploads dir if it doesn't exist so next persist_to_workspace won't fail if no uploads where pulled
      - persist_to_workspace:
          root: /tmp
          paths:
            - project/public_html/web/app/uploads
  pull_languages:
    steps:
      - restore_cache:
          keys:
            - languages-v1-
            - languages-

      - run:
          working_directory: /tmp/project/trellis
          command: ansible-playbook languages.yml -i hosts/${ENV} --extra-vars="site=<< pipeline.parameters.site-name >> mode=pull"
          name: Pull languages

      - run:
          command: find /tmp/project/public_html/web/app/languages -type f -exec md5sum "{}" + > LG_CACHE_KEY || [ -f "LG_CACHE_KEY" ]
          name: Generate checksum for languages folder event if folder doesn't exist
      - save_cache:
          key: languages-v1-{{ checksum "LG_CACHE_KEY" }}
          paths:
            - /tmp/project/public_html/web/app/languages
      - run:
          command: mkdir -p /tmp/project/public_html/web/app/languages
          name: Create languages dir if it doesn't exist so next persist_to_workspace won't fail if no languages where pulled
      - persist_to_workspace:
          root: /tmp
          paths:
            - project/public_html/web/app/languages

  clear_sage_logs:
    steps:
      - run:
          command: rm -rf web/app/themes/<< pipeline.parameters.theme-name >>/storage/logs/*.log
          name: Remove log files which make wp crash
          working_directory: /tmp/project/public_html
  deploy_site:
    description: Deploy Ansible
    steps:
      - run:
          command: >-
            ansible-playbook deploy.yml -vvv -e "env=${ENV} site=<< pipeline.parameters.site-name >>"
          working_directory: /tmp/project/trellis
  approve_hold_for_deploy:
    description: |
      Approves the regression workflow that is waiting for the deploy to finish
    parameters:
      circle_token:
        default: CIRCLE_TOKEN
        description: Environment variable that contains a CircleCI API token
        type: env_var_name
      pipeline_id:
        description: >-
          Pipeline ID from the job. The orb can't access the ID directly for
          security reasons
        type: string
      regression_job:
        default: hold_for_deploy
        description: Name of the job that needs approved
        type: string
      regression_workflow:
        default: build_test_deploy
        description: Name of the regression workflow that needs approved
        type: string
    steps:
      - run:
          command: |

            WORKFLOW=$( curl --location \
                --request GET "https://circleci.com/api/v2/pipeline/<< parameters.pipeline_id >>/workflow" \
                -u "$<< parameters.circle_token >>:" \
                | jq -r ".items[] | select( .name == \"<< parameters.regression_workflow >>\" ) | .id" )
            echo "export WORKFLOW=$WORKFLOW" >> "$BASH_ENV"; source "$BASH_ENV"
          name: Get workflow
          when: on_success
      - run:
          command: |

            JOB=$( curl --location \
                --request GET "https://circleci.com/api/v2/workflow/$WORKFLOW/job" \
                -u "$<< parameters.circle_token >>:" \
                | jq -r ".items[] | select( .name == \"<< parameters.regression_job >>\" ) | .id" )
            echo "export JOB=$JOB" >> "$BASH_ENV"; source "$BASH_ENV"
          name: Get job
          when: on_success
      - run:
          command: |
            curl --request POST \
                --url "https://circleci.com/api/v2/workflow/$WORKFLOW/approve/$JOB" \
                -u "$<< parameters.circle_token >>:"
          name: Approve job
          when: on_success
jobs:
  build_php:
    docker:
      - image: "digitalswing/php-ansible:8.1"
      - environment:
          MYSQL_DATABASE: wordpress
          MYSQL_PASSWORD: wordpress
          MYSQL_ROOT_PASSWORD: password
          MYSQL_USER: wordpress
        image: "circleci/mariadb:10.7.1-focal-ram"
        name: mysql
    working_directory: /tmp
    steps:
      - checkout
      - prepare_ansible
      - find_wp_install
      - provision_server:
          tags: wordpress-setup,vendor-tokens,dotenv,belt
          skip_tags: wordpress-setup-database,wordpress-setup-self-signed-certificate,wordpress-setup-nginx-client-cert
      - install_php_dependencies:
          cache-name: public_html
          base-dir: "project/public_html"
      - install_php_dependencies:
          base-dir: "project/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.theme-name >>"
          cache-name: theme
      - persist_to_workspace:
          root: /tmp
          paths:
            - project/public_html/.env
            - project/public_html/auth.json
            - project/public_html/vendor
            - project/public_html/web/wp
            - project/public_html/web/app/plugins
            - project/public_html/web/app/mu-plugins
            - project/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.theme-name >>/vendor
      - slack/notify:
          event: fail
          template: basic_fail_1
  build_js:
    parameters:
      circle_token:
        default: CIRCLE_TOKEN
        description: Environment variable that contains a CircleCI API token
        type: env_var_name
    docker:
      - image: "digitalswing/php-ansible:8.1"
      - environment:
          MYSQL_DATABASE: wordpress
          MYSQL_PASSWORD: wordpress
          MYSQL_ROOT_PASSWORD: password
          MYSQL_USER: wordpress
        image: "circleci/mariadb:10.7.1-focal-ram"
        name: mysql
    working_directory: /tmp
    steps:
      - checkout
      - prepare_ansible
      - attach_workspace:
          at: /tmp
      - find_wp_install
      - provision_server:
          tags: common
      - install_node_dependencies:
          base-dir: "project/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.theme-name >>"
          cache-name: theme
      - run:
          command: |
            BRANCH="<< pipeline.git.branch >>"
            BRANCH=$(echo $BRANCH | sed "s/[-\/\.]/_/g")
            echo "export BRANCH=\"${BRANCH^^}\"" >> "$BASH_ENV"; source "$BASH_ENV"
      - run:
          command: echo << pipeline.parameters.rebuild-assets >>
      - run:
          command: |

            cmd=('curl' 'https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar/${BRANCH}_ASSETS_VERSION -H "Circle-Token: $<< parameters.circle_token >>" | jq "select( .name == \"${BRANCH}_ASSETS_VERSION\" ) | .value"')

            result=$("${cmd[@]}")

            if [[ -z $result ]] ; then
              curl -X POST \
                --header "Content-Type: application/json" \
                -d '{"name":"'"${BRANCH}_ASSETS_VERSION"'", "value":1}' \
                "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar" -H "Circle-Token: $<< parameters.circle_token >>"

              echo "export BRANCH_ASSETS_VERSION=1" >> "$BASH_ENV"; source "$BASH_ENV"
              echo "1" > /tmp/assets_version
            else
              echo "export BRANCH_ASSETS_VERSION=$result" >> "$BASH_ENV"; source "$BASH_ENV"
              echo "$result" > /tmp/assets_version
            fi
            cat /tmp/assets_version

          name: Get ${BRANCH}_ASSETS_VERSION, set to 1 if it doesn't exist
      - when:
          condition:
            or:
              - equal: [true, << pipeline.parameters.rebuild-assets >>]
              - equal: [master, << pipeline.git.branch >>]
              - equal: [main, << pipeline.git.branch >>]
              - equal: [staging, << pipeline.git.branch >>]
          steps:
            - run:
                command: |
                  if [[ "${ENV}" == "staging" ]] || [[ "${ENV}" == "production" ]] ; then
                    ansible-playbook ci-provision.yml --tags=wordpress,wp-cli --skip-tags=wordpress-install-directories -e '{"env":"ci","install_wp":false}' -vvv            
                    ansible-playbook pull.yml -i hosts/ci -i hosts/${ENV} -e site=<< pipeline.parameters.site-name >> -e env=${ENV} --tags=database -vvv
                  fi
                name: Provision wordpress
                working_directory: /tmp/project/trellis
            - run:
                command: |
                  [ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"
                  [ -s "$HOME/.nvm/bash_completion" ] && \. "$HOME/.nvm/bash_completion"
                  nvm install
                  if [[ "${ENV}" == "staging" ]] || [[ "${ENV}" == "production" ]] ; then
                      yarn build<< pipeline.parameters.production_flag >>
                  else
                      yarn build
                  fi
                name: Build theme assets if the source files changed or if branch is staging|main|master
                working_directory: project/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.theme-name >>
            - run:
                command: |
                  curl -X DELETE \
                    "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar/${BRANCH}_ASSETS_VERSION" \
                    -H "Circle-Token: $<< parameters.circle_token >>"
                name: Delete ${BRANCH}_ASSETS_VERSION
            - run:
                command: |
                  curl -X POST \
                    --header "Content-Type: application/json" \
                    -d '{"name":"'"${BRANCH}_ASSETS_VERSION"'", "value":'$((BRANCH_ASSETS_VERSION + 1))'}' \
                    "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar" -H "Circle-Token: $<< parameters.circle_token >>"
                  echo "export BRANCH_ASSETS_VERSION=$((BRANCH_ASSETS_VERSION + 1))" >> "$BASH_ENV"; source "$BASH_ENV"
                  echo "$BRANCH_ASSETS_VERSION" > /tmp/assets_version
                  cat /tmp/assets_version
                name: Increment ${BRANCH}_ASSETS_VERSION

      - when:
          condition:
            not:
              or:
                - equal: [true, << pipeline.parameters.rebuild-assets >>]
                - equal: [master, << pipeline.git.branch >>]
                - equal: [main, << pipeline.git.branch >>]
                - equal: [staging, << pipeline.git.branch >>]
          steps:
            - restore_cache:
                keys:
                  - assets-{{ .Branch }}-{{ checksum "/tmp/assets_version" }}
            - run:
                command: |
                  if [[ ! -d /tmp/project/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.theme-name >>/<< pipeline.parameters.src-dir >> ]]; then
                    if [[ "${ENV}" == "staging" ]] || [[ "${ENV}" == "production" ]] ; then
                        ansible-playbook ci-provision.yml --tags=wordpress,wp-cli --skip-tags=wordpress-install-directories -e '{"env":"ci","install_wp":false}' -vvv
                        ansible-playbook pull.yml -i hosts/ci -i hosts/${ENV} -e site=<< pipeline.parameters.site-name >> -e env=${ENV} --tags=database -vvv
                        cd /tmp/project/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.theme-name >>
                        [ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"
                        [ -s "$HOME/.nvm/bash_completion" ] && \. "$HOME/.nvm/bash_completion"
                        nvm install
                        yarn build<< pipeline.parameters.production_flag >>
                    else
                        cd /tmp/project/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.theme-name >>
                        [ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"
                        [ -s "$HOME/.nvm/bash_completion" ] && \. "$HOME/.nvm/bash_completion"
                        nvm install
                        yarn build
                    fi

                    curl -X POST \
                      --header "Content-Type: application/json" \
                      -d '{"name":"'"${BRANCH}"_ASSETS_VERSION'", "value":'$((BRANCH_ASSETS_VERSION + 1))'}' \
                      "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar" -H "Circle-Token: $<< parameters.circle_token >>"
                    echo "export BRANCH_ASSETS_VERSION=$((BRANCH_ASSETS_VERSION))" >> "$BASH_ENV"; source "$BASH_ENV"
                    echo "$BRANCH_ASSETS_VERSION" > /tmp/assets_version
                    cat /tmp/assets_version
                  fi
                name: Build theme assets if the build folder doesn't exist
                working_directory: /tmp/project/trellis
      - save_cache:
          paths:
            - project/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.theme-name >>/<< pipeline.parameters.src-dir >>
          key: assets-{{ .Branch }}-{{ checksum "/tmp/assets_version" }}
      - persist_to_workspace:
          root: /tmp
          paths:
            - project/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.theme-name >>/<< pipeline.parameters.src-dir >>
      - store_artifacts:
          path: /tmp/project/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.theme-name >>/<< pipeline.parameters.src-dir >>/report.html
      - slack/notify:
          event: fail
          template: basic_fail_1

  lint:
    resource_class: small
    executor: base
    description: Code static analysis
    working_directory: /tmp
    steps:
      - checkout
      - prepare_ansible
      - provision_server:
          tags: vendor-tokens,belt
      - install_php_dependencies:
          cache-name: public_html
          base-dir: "project/public_html"
      - install_php_dependencies:
          base-dir: "project/<< pipeline.parameters.theme-path >>/<< pipeline.parameters.theme-name >>"
          cache-name: theme
      - run:
          working_directory: project
          name: Run code quality tests
          command: public_html/vendor/bin/grumphp run --testsuite=code_quality -c public_html/grumphp.yml
      - slack/notify:
          event: fail
          template: basic_fail_1

  codeception:
    description: |
      Run codeception tests for end-to-end testing on a WordPress site.
      Codeception supports unit, wpunit, functional, and acceptance testing.
    docker:
      - image: "digitalswing/php-ansible:8.1"
      - environment:
          MYSQL_DATABASE: wordpress
          MYSQL_PASSWORD: wordpress
          MYSQL_ROOT_PASSWORD: password
          MYSQL_USER: wordpress
        image: "circleci/mariadb:10.7.1-focal-ram"
        name: mysql

      # ne fonctionne pas car selenium ne parvient pas à se connecter à l'image principale et doit donc être lancé depuis la meme image
      # - image: selenium/standalone-chrome:90.0.4430.212
      #   name: webdriver
    working_directory: /tmp
    parameters:
      package_name:
        default: << pipeline.parameters.site-name >>
        description: Name of the plugin or theme (directory name)
        type: string
      package_type:
        default: project
        description: Is this a WordPress plugin or theme
        enum:
          - plugin
          - theme
          - project
        type: enum
    steps:
      - checkout
      - browser-tools/install-chrome:
          chrome-version: "90.0.4430.212"
      - browser-tools/install-chromedriver
      # - run:
      #     name: Download Selenium
      #     command: curl -O https://selenium-release.storage.googleapis.com/3.141/selenium-server-standalone-3.141.59.jar
      #     working_directory: /tmp/project/public_html
      - run:
          command: |
            google-chrome --version
            chromedriver --version
            java -jar /usr/local/bin/selenium.jar --version
          name: Check install
          working_directory: /tmp/project/public_html

      - run:
          name: Start Selenium
          command: java -jar /usr/local/bin/selenium.jar -log tests/_output/selenium.log
          background: true
          working_directory: /tmp/project/public_html
      # - set_bin_default_path

      - when:
          condition:
            equal:
              - project
              - << parameters.package_type >>
          steps:
            - attach_workspace:
                at: /tmp
            - run:
                command: >-
                  echo "export CODECEPT_DIRECTORY=/tmp/project/public_html" >>
                  "$BASH_ENV"
                name: Set up tests directory
                working_directory: /tmp/project/public_html
      # - when:
      #     condition:
      #       or:
      #         - equal:
      #             - theme
      #             - << parameters.package_type >>
      #         - equal:
      #             - plugin
      #             - << parameters.package_type >>
      #     steps:
      #       - attach_workspace:
      #           at: >-
      #             /home/circleci/project/public_html/web/app/<< parameters.package_type
      #             >>s/<< parameters.package_name >>
      #       - run:
      #           command: >-
      #             echo "export
      #             CODECEPT_DIRECTORY=$CIRCLE_WORKING_DIRECTORY/public_html/web/app/<<
      #             parameters.package_type >>s/<< parameters.package_name >>" >>
      #             "$BASH_ENV"
      #           name: Set up tests directory
      # - restore_cache:
      #     keys:
      #       - "installwpbrowser-v5"
      # - run:
      #     command: ansible-playbook codeception-install.yml -e "env=ci site=<< pipeline.parameters.site-name >>" -vvv
      #     working_directory: project/trellis

      - prepare_ansible
      - find_wp_install
      - provision_server:
          tags: wordpress,wp-cli,codeception,mail
          skip_tags: wordpress-install-directories
      - run:
          name: Import database
          command: /usr/bin/wp db import tests/_data/dump.sql
          working_directory: /tmp/project/public_html
      - run: touch "$CODECEPT_DIRECTORY/.env"
      - run:
          command: |
            php_files=(`find "$CODECEPT_DIRECTORY/tests/acceptance/" -name "*.php"`)
            if [ ${#php_files[@]} -gt 0 ]
            then
                cd "$CODECEPT_DIRECTORY" && ./vendor/bin/codecept run acceptance \
                --env=circleci \
                --xml="$CODECEPT_DIRECTORY/tests/_output/acceptance/results.xml" \
                --no-interaction \
                -vvv
            fi
          name: Run Codeception acceptance tests
          working_directory: /tmp/project/public_html
      - run:
          command: |
            php_files=(`find "$CODECEPT_DIRECTORY/tests/functional/" -name "*.php"`)
            if [ ${#php_files[@]} -gt 0 ]
            then
                cd "$CODECEPT_DIRECTORY" && ./vendor/bin/codecept run functional \
                --env=circleci \
                --xml="$CODECEPT_DIRECTORY/tests/_output/functional/results.xml" \
                --no-interaction \
                -vvv
            fi
          name: Run Codeception functional tests
          working_directory: /tmp/project/public_html
      - run:
          command: |
            php_files=(`find "$CODECEPT_DIRECTORY/tests/unit/" -name "*.php"`)
            if [ ${#php_files[@]} -gt 0 ]
            then
                cd "$CODECEPT_DIRECTORY" && ./vendor/bin/codecept run unit \
                --xml="$CODECEPT_DIRECTORY/tests/_output/unit/results.xml" \
                --no-interaction \
                -vvv
            fi
          name: Run Codeception unit tests
          working_directory: /tmp/project/public_html
      - run:
          command: |
            php_files=(`find "$CODECEPT_DIRECTORY/tests/wpunit/" -name "*.php"`)
            if [ ${#php_files[@]} -gt 0 ]
            then
                cd "$CODECEPT_DIRECTORY" && ./vendor/bin/codecept run wpunit \
                --xml="$CODECEPT_DIRECTORY/tests/_output/wpunit/results.xml" \
                --no-interaction \
                -vvv
            fi
          name: Run Codeception wpunit tests
          working_directory: /tmp/project/public_html
      - store_test_results:
          path: /tmp/project/public_html/tests/_output
      - store_artifacts:
          path: /tmp/project/public_html/tests/_output
      - slack/notify:
          event: fail
          template: basic_fail_1

  backstopjs:
    description: Run visual regression tests using backstopjs
    docker:
      - image: "digitalswing/php-ansible:8.1"
      - environment:
          MYSQL_DATABASE: wordpress
          MYSQL_PASSWORD: wordpress
          MYSQL_ROOT_PASSWORD: password
          MYSQL_USER: wordpress
        # image: "circleci/mysql:5"
        image: "circleci/mariadb:10.7.1-focal-ram"
        name: mysql
    working_directory: /tmp
    parameters:
      regression_job:
        default: hold_for_deploy
        description: Name of the job that needs approved
        type: string
      regression_workflow:
        default: build_test_deploy
        description: Name of the regression workflow that needs approved
        type: string
      pipeline_id:
        default: 00000000-0000-0000-0000-000000000001
        description: >-
          Pipeline ID from the job. The orb can't access the ID directly for
          security reasons
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - prepare_ansible
      - find_wp_install
      - provision_server:
          tags: wp-cli,wordpress
          install_wp: true

      - run: ls -al /tmp/project/public_html/web/app/uploads
      - install_node_dependencies
      # - install_backstop
      - run:
          command: echo 'export PATH=/tmp/project/node_modules/.bin:$PATH' >> $BASH_ENV
          name: Add local node_modules/.bin to PATH
      - pull_languages
      - run:
          working_directory: project/trellis
          command: |
            ansible-playbook pull.yml -i hosts/ci -i hosts/${ENV} -e site=<< pipeline.parameters.site-name >> -e env=${ENV} --tags=database -vvv
          name: Pull database

      - run:
          working_directory: project/public_html/tests/backstop
          command: |
            [ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"
            [ -s "$HOME/.nvm/bash_completion" ] && \. "$HOME/.nvm/bash_completion"
            nvm install
            node scrape.mjs --env=${ENV} --pathFile=paths
          name: Scrape uploads

      - run:
          working_directory: project/public_html/tests
          command: . move_scraped_uploads.sh
          name: Move scraped uploads to wordpress uploads folder

      - run:
          working_directory: project/public_html
          command: |
            set -e
            [ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"
            [ -s "$HOME/.nvm/bash_completion" ] && \. "$HOME/.nvm/bash_completion"
            nvm install
            backstop-retry-failed-scenarios --retry 5 --reference-command  'backstop reference --configPath=./tests/backstop/backstop.cjs --pathFile=paths --env=${ENV}' --command  'backstop test --configPath=./tests/backstop/backstop.cjs --pathFile=paths --env=${ENV} --testenv=local' --config  "./tests/backstop/backstop.cjs"
          name: Reference live site and test against deployed site, retry 5 times if scenarios fail
      - approve_hold_for_deploy:
          pipeline_id: << parameters.pipeline_id >>
          regression_job: << parameters.regression_job >>
          regression_workflow: << parameters.regression_workflow >>
      - store_artifacts:
          path: /tmp/project/public_html/tests/backstop/backstop_data
      - store_test_results:
          path: /tmp/project/public_html/tests/backstop/backstop_data
      - slack/notify:
          event: fail
          template: basic_fail_1
  deploy:
    resource_class: small
    description: Build and deploy the codebase to a Trellis environment
    executor: base
    working_directory: /tmp
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - prepare_ansible
      - find_wp_install
      - provision_server:
          tags: wordpress
          skip_tags: wordpress-install-directories
      - deploy_site
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  # lighthouse:
  #   executor: lighthouse-check/default
  #   parameters:
  #     urls: localhost
  #   steps:
  #     - lighthouse-check/audit:
  #         prCommentAccessToken: $LIGHTHOUSE_CHECK_GITHUB_ACCESS_TOKEN
  #         prCommentUrl: https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PULL_REQUEST}/reviews
  #         urls: << parameters.urls >>
workflows:
  build_test_deploy:
    jobs:
      - build_php:
          context:
            - TOKENS
            - slack-secrets
      - build_js:
          context:
            - TOKENS
            - slack-secrets
          requires:
            - build_php
      # - lint:
      #     context: TOKENS
      #     filters:
      #       branches:
      #         ignore:
      #           - /.*dep.*/
      #           - staging
      #           - master
      #           - main
      #           - /.*wp-plugins.*/
      - codeception:
          context:
            - TOKENS
            - slack-secrets
          requires:
            - build_php
            - build_js
          filters:
            branches:
              only:
                - staging
                - master
                - main
                - develop
                - /.*php-.*/
                - /.*npm-[^dev].*/
                - /.*plugins-[^dev].*/
                - /.*themes-.*/
                - /.*wordpress.*/
                - /.*codeception.*/
      - backstopjs:
          pipeline_id: << pipeline.id >>
          context:
            - TOKENS
            - slack-secrets
          requires:
            - build_php
            - build_js
          filters:
            branches:
              only:
                - staging
                - master
                - main
                - /.*(php|npm)-major.*/
                - /.*plugins-[^dev].*/
                - /.*themes-.*/
                - /.*wordpress.*/
                - /.*backstopjs.*/
                - /.*puppeteer.*/
      - hold_for_deploy:
          type: approval
          filters:
            branches:
              only:
                - staging
                - master
                - main
      - deploy:
          context:
            - TOKENS
            - slack-secrets
          filters:
            branches:
              only:
                - staging
                - master
                - main
          name: deploy
          requires:
            - hold_for_deploy
            - codeception
      # - lighthouse:
      #     context: TOKENS
      #     filters:
      #       branches:
      #         only:
      #           - staging
      #     name: lighthouse check
      #     requires:
      #       - build_php
      #       - build_js
