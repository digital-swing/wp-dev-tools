version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.0
  slack: circleci/slack@4.1
  php: circleci/php@1.1.0
  node: circleci/node@5.0.2

images:
  php-ansible: &php-ansible
    image: "digitalswing/php-ansible:7.4"
  mariadb: &mariadb
    image: "cimg/mariadb:10.7.4"
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_PASSWORD: wordpress
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: wordpress
    name: mysql

executors:
  base:
    docker:
      - *php-ansible
    working_directory: /tmp
  base_db:
    docker:
      - *php-ansible
      - *mariadb
    working_directory: /tmp

commands:
  add_key_to_known_hosts:
    description: Adds SSH key to known_hosts (if it matches a fingerprint)
    parameters:
      domain:
        type: string
      key_type:
        type: string
      fingerprint:
        type: string

    steps:
      - run:
          name: Add "<< parameters.key_type >>" key from << parameters.domain >> to known_hosts
          command: |
            # Fetch publicly available key
            SCAN=$(ssh-keyscan -t << parameters.key_type >> << parameters.domain >>)
            echo "*** scanned key: $SCAN"
            # Compute fingerprint
            SCAN_FINGERPRINT=$(echo "$SCAN" | ssh-keygen -lf - )
            echo "*** scanned fingerprint: $SCAN_FINGERPRINT"
            echo "*** known fingerprint: << parameters.fingerprint >>"
            if [[ "$SCAN_FINGERPRINT" =~ "<< parameters.fingerprint >>" ]]; then
              echo "Scanned key matches known fingerprint, adding..."
              mkdir -p ~/.ssh
              echo "$SCAN" >> ~/.ssh/known_hosts
              chmod 0700 ~/.ssh
              chmod 0600 ~/.ssh/known_hosts
            else
              echo "Scanned key does not match known fingerprint, not adding."
              exit 1
            fi
  add_github_key_to_known_hosts:
    description: Adds SSH key to known_hosts (if it matches a fingerprint)
    steps:
      - add_key_to_known_hosts:
          domain: github.com
          key_type: ecdsa
          fingerprint: "SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM"

      - add_key_to_known_hosts:
          domain: github.com
          key_type: rsa
          fingerprint: "SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8"

      - add_key_to_known_hosts:
          domain: github.com
          key_type: ed25519
          fingerprint: "SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU"
  checkout:
    description: Clone << parameters.repo >>
    parameters:
      repo:
        description: "The repo to clone"
        type: string
        default: "bedrock-trellis-ds"
      branch:
        description: "Git branch to clone"
        type: string
        default: "develop"
    steps:
      - run:
          command: |
            git clone -b << parameters.branch >> git@github.com:digital-swing/<< parameters.repo >>.git project
  require_current_version:
    description: Require current package branch
    steps:
      - run:
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ]; then
                BRANCH="main"
            else
                BRANCH="$CIRCLE_BRANCH"
            fi
            composer require --dev digital-swing/wp-dev-tools:dev-$CIRCLE_BRANCH -W
          working_directory: project/public_html
          name: Require current package branch
  get_php_version:
    description: Extract php version from repo
    parameters:
      repo:
        description: "The repo to clone"
        type: string
        default: "bedrock-trellis-ds"
      branch:
        description: "Git branch to clone"
        type: string
        default: "develop"
    steps:
      - run: |
          curl --header "Authorization: token ${GH_BOT_PAT}" \
            --header 'Accept: application/vnd.github.v3.raw' \
            --output /tmp/main.yml \
            --location https://raw.githubusercontent.com/digital-swing/<< parameters.repo >>/<< parameters.branch >>/trellis/group_vars/all/main.yml
          echo "export PHP_VERSION=$(cat /tmp/main.yml | grep php_version | cut -d'"' -f 2)" >> $BASH_ENV

  prepare_ansible:
    description: Load API keys and passwords into required files
    steps:
      - run:
          command: echo "${ANSIBLE_VAULT_PASSWORD}" > /home/circleci/.vault_pass
          name: Set ansible vault password
      - restore_cache:
          keys:
            - ansible-galaxy-v5-{{ checksum "project/trellis/galaxy.yml" }}
            - ansible-galaxy-
      - run:
          command: ansible --version
          working_directory: project/trellis

      - run:
          command: ansible-galaxy install -r galaxy.yml
          name: Install ansible galaxy roles
          working_directory: project/trellis

      - save_cache:
          key: ansible-galaxy-v5-{{ checksum "project/trellis/galaxy.yml" }}
          paths:
            - /tmp/project/trellis/vendor
            - /home/circleci/.cache
  get_ansible_vars:
    description: Get vars from ansible config and store them to $BASH_ENV
    steps:
      - run:
          command: |
            .circleci/get_ansible_vars
          name: Set up the WP install name
  find_wp_install:
    description: Set up our WP_ENV based on the environment
    parameters:
      environment:
        default: undefined
        description: >
          Are we deploying to the production, staging, development, or custom
          environment?

          Production, staging, and development need a corresponding environment
          variable defined

          in CircleCI's project configuration. An optional
          `./.gitignores/__deployment`

          file can be used to deploy build files rather than source files.
        type: string
    steps:
      - run:
          command: |
            # shellcheck disable=SC2050
            WP_INSTALL="develop"

            echo "export WP_INSTALL=$WP_INSTALL
            export ENV=`echo $WP_INSTALL`" >> "$BASH_ENV"
            source "$BASH_ENV"
          name: Set up the WP install name
  provision_server:
    description: Provision server
    parameters:
      site-env:
        description: "The environment to deploy to, e.g: staging, production, etc"
        type: string
        default: ci
      tags:
        description: "Ansible tasks to run"
        type: string
        default: wordpress,vendor-tokens,dotenv
      skip_tags:
        description: "Ansible tasks to skip"
        type: string
        default: ""
      install_wp:
        description: "Whether to install wp with wp core install"
        type: boolean
        default: false
    steps:
      - run:
          command: ansible-playbook ci-provision.yml --tags=<< parameters.tags >> --skip-tags=<< parameters.skip_tags >> -e '{"env":"<< parameters.site-env>>","install_wp":<< parameters.install_wp>>}' -vvv
          working_directory: /tmp/project/trellis
          name: Provision server
jobs:
  build_php:
    parameters:
      php-version:
        type: string
        default: "8.0"
      repo:
        description: "The repo to clone"
        type: string
        default: "bedrock-trellis-ds"
      branch:
        description: "Git branch to clone"
        type: string
        default: "develop"
    executor: base_db
    steps:
      - add_github_key_to_known_hosts
      - checkout:
          repo: << parameters.repo >>
          branch: << parameters.branch >>
      - get_ansible_vars
      - prepare_ansible
      - find_wp_install
      - provision_server:
          tags: wordpress-setup,vendor-tokens,dotenv,belt
          skip_tags: wordpress-setup-database,wordpress-setup-self-signed-certificate,wordpress-setup-nginx-client-cert
      - require_current_version
      - php/install-packages:
          app-dir: "project/public_html"
      - php/install-packages:
          app-dir: "project/public_html/web/app/themes/${theme-name}"
      - persist_to_workspace:
          root: /tmp
          paths:
            - project/public_html/.env
            - project/public_html/auth.json
            - project/public_html/vendor
            - project/public_html/web/wp
            - project/public_html/web/app/plugins
            - project/public_html/web/app/mu-plugins
            - project/public_html/web/app/themes/${theme-name}/vendor
      - slack/notify:
          event: fail
          template: basic_fail_1
  build_js:
    parameters:
      php-version:
        type: string
        default: "8.0"
      circle_token:
        default: CIRCLE_TOKEN
        description: Environment variable that contains a CircleCI API token
        type: env_var_name
      repo:
        description: "The repo to clone"
        type: string
        default: "bedrock-trellis-ds"
      branch:
        description: "Git branch to clone"
        type: string
        default: "develop"
    executor: base_db
    steps:
      - add_github_key_to_known_hosts
      - checkout:
          repo: << parameters.repo >>
          branch: << parameters.branch >>
      - get_ansible_vars
      - prepare_ansible
      - attach_workspace:
          at: /tmp
      - find_wp_install
      - provision_server:
          tags: common
      - node/install
      - node/install-packages:
          pkg-manager: yarn
          app-dir: "project/public_html/web/app/themes/${theme-name}"
          include-branch-in-cache-key: false
      - run:
          command: |
            BRANCH="<< pipeline.git.branch >>"
            BRANCH=$(echo $BRANCH | sed "s/[-\/\.]/_/g")
            echo "export BRANCH=\"${BRANCH^^}\"" >> "$BASH_ENV"; source "$BASH_ENV"
      - run:
          command: echo << pipeline.parameters.rebuild-assets >>
      - run:
          command: |

            cmd=('curl' 'https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar/${BRANCH}_ASSETS_VERSION -H "Circle-Token: $<< parameters.circle_token >>" | jq "select( .name == \"${BRANCH}_ASSETS_VERSION\" ) | .value"')

            result=$("${cmd[@]}")

            if [[ -z $result ]] ; then
              curl -X POST \
                --header "Content-Type: application/json" \
                -d '{"name":"'"${BRANCH}_ASSETS_VERSION"'", "value":1}' \
                "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar" -H "Circle-Token: $<< parameters.circle_token >>"

              echo "export BRANCH_ASSETS_VERSION=1" >> "$BASH_ENV"; source "$BASH_ENV"
              echo "1" > /tmp/assets_version
            else
              echo "export BRANCH_ASSETS_VERSION=$result" >> "$BASH_ENV"; source "$BASH_ENV"
              echo "$result" > /tmp/assets_version
            fi
            cat /tmp/assets_version

          name: Get ${BRANCH}_ASSETS_VERSION, set to 1 if it doesn't exist
      - when:
          condition:
            or:
              - equal: [true, << pipeline.parameters.rebuild-assets >>]
              - equal: [master, << pipeline.git.branch >>]
              - equal: [main, << pipeline.git.branch >>]
              - equal: [staging, << pipeline.git.branch >>]
          steps:
            - run:
                command: |
                  if [[ "${ENV}" == "staging" ]] || [[ "${ENV}" == "production" ]] ; then
                    ansible-playbook ci-provision.yml --tags=wordpress,wp-cli --skip-tags=wordpress-install-directories -e '{"env":"ci","install_wp":false}' -vvv            
                    ansible-playbook pull.yml -i hosts/ci -i hosts/${ENV} -e site=${site-name} -e env=${ENV} --tags=database -vvv
                  fi
                name: Provision wordpress
                working_directory: /tmp/project/trellis
            - run:
                command: |
                  [ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"
                  [ -s "$HOME/.nvm/bash_completion" ] && \. "$HOME/.nvm/bash_completion"
                  nvm install
                  if [[ "${ENV}" == "staging" ]] || [[ "${ENV}" == "production" ]] ; then
                      yarn build${production_flag}
                  else
                      yarn build
                  fi
                name: Build theme assets if the source files changed or if branch is staging|main|master
                working_directory: project/public_html/web/app/themes/${theme-name}
            - run:
                command: |
                  curl -X DELETE \
                    "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar/${BRANCH}_ASSETS_VERSION" \
                    -H "Circle-Token: $<< parameters.circle_token >>"
                name: Delete ${BRANCH}_ASSETS_VERSION
            - run:
                command: |
                  curl -X POST \
                    --header "Content-Type: application/json" \
                    -d '{"name":"'"${BRANCH}_ASSETS_VERSION"'", "value":'$((BRANCH_ASSETS_VERSION + 1))'}' \
                    "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar" -H "Circle-Token: $<< parameters.circle_token >>"
                  echo "export BRANCH_ASSETS_VERSION=$((BRANCH_ASSETS_VERSION + 1))" >> "$BASH_ENV"; source "$BASH_ENV"
                  echo "$BRANCH_ASSETS_VERSION" > /tmp/assets_version
                  cat /tmp/assets_version
                name: Increment ${BRANCH}_ASSETS_VERSION

      - when:
          condition:
            not:
              or:
                - equal: [true, << pipeline.parameters.rebuild-assets >>]
                - equal: [master, << pipeline.git.branch >>]
                - equal: [main, << pipeline.git.branch >>]
                - equal: [staging, << pipeline.git.branch >>]
          steps:
            - restore_cache:
                keys:
                  - assets-{{ .Branch }}-{{ checksum "/tmp/assets_version" }}
            - run:
                command: |
                  if [[ ! -d /tmp/project/public_html/web/app/themes/${theme-name}/${src-dir} ]]; then
                    if [[ "${ENV}" == "staging" ]] || [[ "${ENV}" == "production" ]] ; then
                        ansible-playbook ci-provision.yml --tags=wordpress,wp-cli --skip-tags=wordpress-install-directories -e '{"env":"ci","install_wp":false}' -vvv
                        ansible-playbook pull.yml -i hosts/ci -i hosts/${ENV} -e site=${site-name} -e env=${ENV} --tags=database -vvv
                        cd /tmp/project/public_html/web/app/themes/${theme-name}
                        [ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"
                        [ -s "$HOME/.nvm/bash_completion" ] && \. "$HOME/.nvm/bash_completion"
                        nvm install
                        yarn build${production_flag}
                    else
                        cd /tmp/project/public_html/web/app/themes/${theme-name}
                        [ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"
                        [ -s "$HOME/.nvm/bash_completion" ] && \. "$HOME/.nvm/bash_completion"
                        nvm install
                        yarn build
                    fi

                    curl -X POST \
                      --header "Content-Type: application/json" \
                      -d '{"name":"'"${BRANCH}"_ASSETS_VERSION'", "value":'$((BRANCH_ASSETS_VERSION + 1))'}' \
                      "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar" -H "Circle-Token: $<< parameters.circle_token >>"
                    echo "export BRANCH_ASSETS_VERSION=$((BRANCH_ASSETS_VERSION))" >> "$BASH_ENV"; source "$BASH_ENV"
                    echo "$BRANCH_ASSETS_VERSION" > /tmp/assets_version
                    cat /tmp/assets_version
                  fi
                name: Build theme assets if the build folder doesn't exist
                working_directory: /tmp/project/trellis
      - save_cache:
          paths:
            - project/public_html/web/app/themes/${theme-name}/${src-dir}
          key: assets-{{ .Branch }}-{{ checksum "/tmp/assets_version" }}
      - persist_to_workspace:
          root: /tmp
          paths:
            - project/public_html/web/app/themes/${theme-name}/${src-dir}
      - store_artifacts:
          path: /tmp/project/public_html/web/app/themes/${theme-name}/${src-dir}/report.html
      - slack/notify:
          event: fail
          template: basic_fail_1

  codeception:
    description: |
      Run codeception tests for end-to-end testing on a WordPress site.
      Codeception supports unit, wpunit, functional, and acceptance testing.
    executor:
      base_db
      # ne fonctionne pas car selenium ne parvient pas à se connecter à l'image principale et doit donc être lancé depuis la meme image
      # - image: selenium/standalone-chrome:90.0.4430.212
      #   name: webdriver
    parameters:
      repo:
        description: "The repo to clone"
        type: string
        default: "bedrock-trellis-ds"
      branch:
        description: "Git branch to clone"
        type: string
        default: "develop"
      package_name:
        default: ${site-name}
        description: Name of the plugin or theme (directory name)
        type: string
      package_type:
        default: project
        description: Is this a WordPress plugin or theme
        enum:
          - plugin
          - theme
          - project
        type: enum
    steps:
      - add_github_key_to_known_hosts
      - checkout:
          repo: << parameters.repo >>
          branch: << parameters.branch >>
      - get_ansible_vars
      - browser-tools/install-chrome:
          chrome-version: "90.0.4430.212"
      - browser-tools/install-chromedriver
      # - run:
      #     name: Download Selenium
      #     command: curl -O https://selenium-release.storage.googleapis.com/3.141/selenium-server-standalone-3.141.59.jar
      #     working_directory: /tmp/project/public_html
      - run:
          command: |
            google-chrome --version
            chromedriver --version
            java -jar /usr/local/bin/selenium.jar --version
          name: Check install
          working_directory: /tmp/project/public_html

      - run:
          name: Start Selenium
          command: java -jar /usr/local/bin/selenium.jar -log tests/_output/selenium.log
          background: true
          working_directory: /tmp/project/public_html

      - when:
          condition:
            equal:
              - project
              - << parameters.package_type >>
          steps:
            - attach_workspace:
                at: /tmp
            - run:
                command: >-
                  echo "export CODECEPT_DIRECTORY=/tmp/project/public_html" >>
                  "$BASH_ENV"
                name: Set up tests directory
                working_directory: /tmp/project/public_html
      # - when:
      #     condition:
      #       or:
      #         - equal:
      #             - theme
      #             - << parameters.package_type >>
      #         - equal:
      #             - plugin
      #             - << parameters.package_type >>
      #     steps:
      #       - attach_workspace:
      #           at: >-
      #             /home/circleci/project/public_html/web/app/<< parameters.package_type
      #             >>s/<< parameters.package_name >>
      #       - run:
      #           command: >-
      #             echo "export
      #             CODECEPT_DIRECTORY=$CIRCLE_WORKING_DIRECTORY/public_html/web/app/<<
      #             parameters.package_type >>s/<< parameters.package_name >>" >>
      #             "$BASH_ENV"
      #           name: Set up tests directory
      # - restore_cache:
      #     keys:
      #       - "installwpbrowser-v5"
      # - run:
      #     command: ansible-playbook codeception-install.yml -e "env=ci site=${site-name}" -vvv
      #     working_directory: project/trellis

      - prepare_ansible
      - find_wp_install
      - provision_server:
          tags: wordpress,wp-cli,codeception,mail
          skip_tags: wordpress-install-directories
      - run:
          name: Import database
          command: /usr/bin/wp db import tests/_data/dump.sql
          working_directory: /tmp/project/public_html
      - run: touch "$CODECEPT_DIRECTORY/.env"
      - run:
          command: |
            php_files=(`find "$CODECEPT_DIRECTORY/tests/acceptance/" -name "*.php"`)
            if [ ${#php_files[@]} -gt 0 ]
            then
                cd "$CODECEPT_DIRECTORY" && ./vendor/bin/codecept run acceptance \
                --env=circleci \
                --xml="$CODECEPT_DIRECTORY/tests/_output/acceptance/results.xml" \
                --no-interaction \
                -vvv
            fi
          name: Run Codeception acceptance tests
          working_directory: /tmp/project/public_html
      - run:
          command: |
            php_files=(`find "$CODECEPT_DIRECTORY/tests/functional/" -name "*.php"`)
            if [ ${#php_files[@]} -gt 0 ]
            then
                cd "$CODECEPT_DIRECTORY" && ./vendor/bin/codecept run functional \
                --env=circleci \
                --xml="$CODECEPT_DIRECTORY/tests/_output/functional/results.xml" \
                --no-interaction \
                -vvv
            fi
          name: Run Codeception functional tests
          working_directory: /tmp/project/public_html
      - run:
          command: |
            php_files=(`find "$CODECEPT_DIRECTORY/tests/unit/" -name "*.php"`)
            if [ ${#php_files[@]} -gt 0 ]
            then
                cd "$CODECEPT_DIRECTORY" && ./vendor/bin/codecept run unit \
                --xml="$CODECEPT_DIRECTORY/tests/_output/unit/results.xml" \
                --no-interaction \
                -vvv
            fi
          name: Run Codeception unit tests
          working_directory: /tmp/project/public_html
      - run:
          command: |
            php_files=(`find "$CODECEPT_DIRECTORY/tests/wpunit/" -name "*.php"`)
            if [ ${#php_files[@]} -gt 0 ]
            then
                cd "$CODECEPT_DIRECTORY" && ./vendor/bin/codecept run wpunit \
                --xml="$CODECEPT_DIRECTORY/tests/_output/wpunit/results.xml" \
                --no-interaction \
                -vvv
            fi
          name: Run Codeception wpunit tests
          working_directory: /tmp/project/public_html
      - store_test_results:
          path: /tmp/project/public_html/tests/_output
      - store_artifacts:
          path: /tmp/project/public_html/tests/_output
      - slack/notify:
          event: fail
          template: basic_fail_1
workflows:
  build_test_deploy:
    jobs:
      - build_php:
          pre-steps:
            - get_php_version
          context:
            - TOKENS
            - slack-secrets
          matrix:
            parameters:
              repo: ["bedrock-trellis-ds"]
              branch: ["7.4"]
      - build_js:
          pre-steps:
            - get_php_version
          context:
            - TOKENS
            - slack-secrets
          requires:
            - build_php-<< matrix.branch >>-<< matrix.repo >>
          matrix:
            parameters:
              repo: ["bedrock-trellis-ds"]
              branch: ["7.4"]
      - codeception:
          pre-steps:
            - get_php_version
          context:
            - TOKENS
            - slack-secrets
          requires:
            - build_php-<< matrix.branch >>-<< matrix.repo >>
            - build_js-<< matrix.branch >>-<< matrix.repo >>
          filters:
            branches:
              only:
                - staging
                - master
                - main
                - develop
                - /.*php-.*/
                - /.*codeception.*/
          matrix:
            parameters:
              repo: ["bedrock-trellis-ds"]
              branch: ["7.4"]
